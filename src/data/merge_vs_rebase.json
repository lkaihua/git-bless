[
  {
    "label": "Working on a feature branch while the master branch is updated",
    "content": "Consider what happens when you start working on a new feature in a dedicated branch, then another team member updates the master branch with new commits. This results in a forked history, which should be familiar to anyone who has used Git as a collaboration tool.",
    "graph": [
      {
        "id": "0",
        "parentIds": []
      },
      {
        "id": "1",
        "parentIds": ["0"]
      },
      {
        "id": "2",
        "parentIds": ["1"]
      },
      {
        "id": "3",
        "parentIds": ["2"],
        "tags": ["feature"],
        "head": true
      },
      {
        "id": "4",
        "parentIds": ["1"]
      },
      {
        "id": "5",
        "parentIds": ["4"],
        "tags": ["master"]
      }
    ]
  },
  {
    "label": "Merge Option",
    "content": "First option is to merge the master branch into the feature branch. This creates a new merge commit in the feature branch that ties together the histories of both branches. Merging is nice because it’s a non-destructive operation. The existing branches are not changed in any way. On the other hand, this also means that the feature branch will have an extraneous merge commit every time you need to incorporate upstream changes. If master is very active, this can pollute your feature branch’s history quite a bit.",
    "graph": [
      {
        "id": "0",
        "parentIds": []
      },
      {
        "id": "1",
        "parentIds": ["0"]
      },
      {
        "id": "2",
        "parentIds": ["1"]
      },
      {
        "id": "3",
        "name": "3",
        "parentIds": ["2"]
      },
      {
        "id": "4",
        "parentIds": ["1"]
      },
      {
        "id": "5",
        "parentIds": ["4"],
        "tags": ["master"]
      },
      {
        "id": "6",
        "name": "6*",
        "parentIds": ["3"],
        "tags": ["feature"],
        "head": true
      }
    ]
  },
  {
    "label": "Reset",
    "content": "",
    "graph": [
      {
        "id": "0",
        "parentIds": []
      },
      {
        "id": "1",
        "parentIds": ["0"]
      },
      {
        "id": "2",
        "parentIds": ["1"]
      },
      {
        "id": "3",
        "parentIds": ["2"],
        "tags": ["feature"],
        "head": true
      },
      {
        "id": "4",
        "parentIds": ["1"]
      },
      {
        "id": "5",
        "parentIds": ["4"],
        "tags": ["master"]
      }
    ]
  },
  {
    "label": "Rebase option",
    "content": "As an alternative to merging, you can rebase the feature branch onto master branch. This moves the entire feature branch to begin on the tip of the master branch, effectively incorporating all of the new commits in master. But, instead of using a merge commit, rebasing re-writes the project history by creating brand new commits for each commit in the original branch.",
    "graph": [
      {
        "id": "0",
        "parentIds": []
      },
      {
        "id": "1",
        "parentIds": ["0"]
      },
      {
        "id": "2",
        "name": "2*",
        "parentIds": ["5"]
      },
      {
        "id": "3",
        "name": "3*",
        "parentIds": ["2"],
        "tags": ["feature"],
        "head": true
      },
      {
        "id": "4",
        "parentIds": ["1"]
      },
      {
        "id": "5",
        "parentIds": ["4"],
        "tags": ["master"]
      }
    ]
  }
]